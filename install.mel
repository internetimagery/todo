shelfButton -l "todo" -c "\n\n\n\n\nfrom functools import wraps\nimport __builtin__ as GLOBAL\nimport maya.cmds as cmds\nimport collections\nimport traceback\nimport datetime\nimport shutil\nimport random\nimport json\nimport time\nimport sys\nimport os\nimport re\n\n\nclass FileInfo(collections.MutableMapping):\n    \n    def _encode(s, txt):\n        return json.dumps(txt)\n\n    def _decode(s, u):\n        u = u.decode(\"unicode_escape\")\n        try:\n            return json.loads(u)\n        except ValueError as e:\n            print \"ERR: %s\" % e, u\n            return u\n\n    def _key(s, k):\n        if k in s.blacklist:\n            return \"%s_\" % k\n        return k\n\n    def __init__(s):\n        s.blacklist = [\"application\", \"product\", \"version\", \"cutIdentifier\", \"osv\", \"license\"]\n        s.data = dict()\n        init = cmds.fileInfo(q=True)\n        if init:\n            s.data = dict((k, s._decode(v)) for k, v in (lambda x: zip(x[::2], x[1::2]))(cmds.fileInfo(q=True)) if k not in s.blacklist)\n        s.update(dict())\n\n    def __getitem__(s, k):\n        k = s._key(k)\n        i = cmds.fileInfo(k, q=True)\n        s.data[k] = s._decode(i[0] if i else '\"\"')\n        return s.data[k]\n\n    def __setitem__(s, k, v):\n        k = s._key(k)\n        cmds.fileInfo(k, s._encode(v))\n        s.data[k] = v\n\n    def __delitem__(s, k):\n        k = s._key(k)\n        cmds.fileInfo(rm=k)\n        del s.data[k]\n\n    def __iter__(s):\n        return iter(s.data)\n\n    def __len__(s):\n        return len(s.data)\n\n\nclass SafetyNet(object):\n    \n    def delete(s, path):\n        try:\n            if os.path.isfile(path):\n                os.remove(path)\n                print \"Deleting file %s\" % path\n            elif os.path.isdir(path):\n                shutil.rmtree(path)\n                print \"Removing folder %s\" % path\n        except OSError as e:\n            print e\n\n    def __enter__(s):\n        s.cleanup = []\n        return s\n\n    def __exit__(s, errType, errVal, trace):\n        if errType:\n            print \"Uh oh... there was a problem. :(\"\n            print \"%s :: %s\" % (errType.__name__, errVal)\n            print \"\\n\".join(traceback.format_tb(trace))\n        if s.cleanup:\n            for clean in s.cleanup:\n                s.delete(clean)\n        return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass TimeSlider(object):\n    \n    def frame(s, frame):\n        cmds.currentTime(frame)\n\n    def range(s, start, end):\n        \n        cmds.playbackOptions(e=True, min=start, max=end)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass MainWindow(object):\n    \n    def __init__(s):\n        s.page = \"\"  \n        s.data = FileInfo()  \n        s.basename = \"TODO\"  \n        s.regex = {}  \n\n        title = random.choice([\n            \"Todo:\",\n            \"Going well.\",\n            \"Keep it up!\",\n            \"You can do it.\",\n            \"Good stuff.\",\n            \"Things to do...\",\n            \"Making progress.\",\n            \"Slow and steady\"])\n\n        window = cmds.window(title=title, rtf=True)\n        s.container = cmds.columnLayout(adjustableColumn=True)\n        s.wrapper = \"\"\n\n        allowed_areas = ['right', 'left']\n        s.dock = cmds.dockControl(\"todo_window\", a='left', content=window, aa=allowed_areas, fl=True, l=title, fcc=s.moveDock, vcc=s.closeDock)\n\n        s._buildTodo()\n\n        if s.data[\"todo_location\"] == 'float':\n            cmds.dockControl(s.dock, e=True, fl=True)\n        elif s.data[\"todo_location\"] in allowed_areas:\n            cmds.dockControl(s.dock, e=True, a=s.data[\"todo_location\"], fl=False)\n        else:\n            s.data[\"todo_location\"] = \"float\"\n\n        cmds.scriptJob(e=[\"PostSceneRead\", s._refresh], p=s.dock)\n        cmds.scriptJob(e=[\"NewSceneOpened\", s._refresh], p=s.dock)\n\n    def _clear(s):\n        \n        if cmds.layout(s.wrapper, ex=True):\n            cmds.deleteUI(s.wrapper)\n        s.wrapper = cmds.columnLayout(adjustableColumn=True, p=s.container)\n\n    def _refresh(s):\n        \n        s.data = FileInfo()\n        if s.page == \"todo\":\n            s._buildTodo()\n        if s.page == \"settings\":\n            s._buildSettings()\n\n    def _buildTodo(s, *args):\n        \n        s.page = \"todo\"\n        s._clear()\n        cmds.columnLayout(adjustableColumn=True)\n        cmds.columnLayout(adjustableColumn=True)\n        cmds.iconTextButton(h=30, image=\"attributes.png\", label=\"Settings ->\", style=\"iconAndTextHorizontal\", c=s._buildSettings)\n        cmds.separator()\n        text = cmds.textField(\n            aie=True,\n            ed=True,\n            h=30,\n            ec=lambda x: not s.createTodo(x) or clear())\n        cmds.button(\n            label=\"Create a new TODO\",\n            h=20,\n            c=lambda x: not s.createTodo(cmds.textField(text, q=True, tx=True)) or clear())\n        cmds.setParent(\"..\")\n\n        def clear():  \n            cmds.textField(text, e=True, tx=\"\")\n\n        s.todowrap = cmds.columnLayout(adjustableColumn=True)\n        \n        s.todoContainer = \"\"\n        cmds.setParent(\"..\")\n        cmds.setParent(s.wrapper)\n\n        s._buidTodoTasks()\n\n    def _buidTodoTasks(s):\n        \n        if cmds.scrollLayout(s.todoContainer, ex=True):\n            cmds.deleteUI(s.todoContainer)\n        s.regex[\"uid\"] = s.regex.get(\"uid\", re.compile(\"^%s_\\d+\" % s.basename))\n        s.todoContainer = cmds.scrollLayout(bgc=[0.2, 0.2, 0.2], cr=True, p=s.todowrap)\n        sorter = cmds.columnLayout(adj=True, p=s.todoContainer)\n        unsort = cmds.columnLayout(adj=True, p=s.todoContainer)\n        sort_data = {}\n\n        def section(title):  \n            title = title.strip()\n            if title in sort_data:\n                return sort_data[title]\n            else:\n                sort_data[title] = cmds.frameLayout(l=title, p=sorter, collapsable=True)\n                return sort_data[title]\n\n        for v in sorted([dict({\"uid\": k}, **s._parseTodo(s.data[k])) for k in s.data.keys() if k and s.regex[\"uid\"].match(k)], key=lambda x: x[\"label\"]):\n            if v[\"token\"] or v[\"hashtag\"]:\n                if v[\"token\"]:\n                    s.addTodo(v, section(v[\"token\"]))\n                if v[\"hashtag\"]:\n                    for h in v[\"hashtag\"]:\n                        s.addTodo(v, section(h))\n            else:  \n                s.addTodo(v, unsort)\n\n    def _buildSettings(s, *args):\n        \n        ready = False  \n        s.page = \"settings\"\n        data = s.data[\"todo_settings\"] if s.data[\"todo_settings\"] else {}\n\n        def colour(val):\n            return [0.5, 0.5, 0.5] if val else [0.2, 0.2, 0.2]\n\n        def update(k, v):\n            if ready:\n                data[k] = v\n                s.data[\"todo_settings\"] = data\n                s._buildSettings()\n\n        s._clear()\n        cmds.columnLayout(adjustableColumn=True, p=s.wrapper)\n        cmds.iconTextButton(h=30, image=\"revealSelected.png\", label=\"<- Todo\", style=\"iconAndTextHorizontal\", c=s._buildTodo)\n        cmds.separator()\n        cmds.text(label=\"Settings are scene independent.\", h=50)\n        cmds.frameLayout(l=\"Archive options:\")\n        \n        data[\"archive\"] = data.get(\"archive\", False)\n        cmds.columnLayout(\n            adjustableColumn=True,\n            bgc=colour(data[\"archive\"]))\n        cmds.checkBox(\n            l=\"Use File Archive\",\n            v=data[\"archive\"],\n            cc=lambda x: update(\"archive\", x))\n        \n        cmds.rowLayout(nc=2, ad2=2)\n        cmds.text(label=\" - \")\n        data[\"archive_path\"] = data.get(\"archive_path\", \"\")\n        cmds.iconTextButton(\n            en=data[\"archive\"],\n            image=\"fileOpen.png\",\n            l=data[\"archive_path\"] if data[\"archive_path\"] else \"Pick archive folder.\",\n            style=\"iconAndTextHorizontal\",\n            c=lambda: update(\"archive_path\", cmds.fileDialog2(ds=2, cap=\"Select a Folder.\", fm=3, okc=\"Select\")[0]))\n        cmds.setParent(\"..\")\n        cmds.setParent(\"..\")\n        \n        data[\"amp\"] = data.get(\"amp\", False)\n        cmds.columnLayout(\n            adjustableColumn=True,\n            bgc=colour(data[\"amp\"]))\n        cmds.checkBox(\n            l=\"Use AMP archive\",\n            v=data[\"amp\"],\n            cc=lambda x: update(\"amp\", x))\n        cmds.setParent(\"..\")\n        cmds.setParent(\"..\")\n        ready = True\n\n    def _parseTodo(s, label):\n        \n        def build_reg():\n            reg = \"(\\A\\w+(?=:))?\"  \n            reg += \"((?<=#)\\s?\\w+)?\"  \n            frr = \"(?:(\\d+)\\s*(?:[^\\d\\s]|to|and)\\s*(\\d+))\"  \n            fr = \"(\\d+)\"  \n            reg += \"(?:%s|%s)?\" % (frr, fr)\n            return re.compile(reg)\n\n        s.regex[\"label\"] = s.regex.get(\"label\", build_reg())\n        parse = s.regex[\"label\"].finditer(label)\n        result = {}\n        result[\"token\"] = \"\"\n        result[\"hashtag\"] = []\n        result[\"frame\"] = None\n        result[\"framerange\"] = []\n        if parse:\n            for p in parse:\n                m = p.groups()\n                if m[0]:  \n                    result[\"token\"] = m[0]\n                if m[1]:\n                    if m[1] not in result[\"hashtag\"]:\n                        result[\"hashtag\"].append(m[1].strip())\n                if m[2] and m[3]:\n                    result[\"framerange\"] = sorted([m[2], m[3]])\n                if m[4]:\n                    result[\"frame\"] = m[4]\n        \n        s.regex[\"label_clean\"] = s.regex.get(\"label_clean\", re.compile(\"(\\A\\w+:)?\" + \"(#\\s?\\w+,?)?\"))\n        result[\"label\"] = s.regex[\"label_clean\"].sub(\"\", label).strip()\n        return result\n\n    def addTodo(s, todo, parent):\n        \n        wrapper = cmds.rowLayout(nc=4, ad4=1, p=parent)\n        cmds.iconTextButton(\n            image=\"fileSave.png\",\n            h=30,\n            style=\"iconAndTextHorizontal\",\n            label=todo[\"label\"],\n            fn=\"fixedWidthFont\",\n            ann=\"Click to check off and save.\",\n            c=lambda: s.activateTodo(todo[\"uid\"], wrapper))\n        if todo[\"frame\"] or todo[\"frame\"] is 0:\n            cmds.iconTextButton(\n                image=\"centerCurrentTime.png\",\n                style=\"iconOnly\",\n                w=30,\n                ann=\"Go to frame %s.\" % todo[\"frame\"],\n                c=lambda: TimeSlider().frame(todo[\"frame\"]))\n        elif todo[\"framerange\"]:\n            cmds.iconTextButton(\n                image=\"traxFrameRange.png\",\n                style=\"iconOnly\",\n                w=30,\n                ann=\"Jump to frame range (%s to %s).\" % (todo[\"framerange\"][0], todo[\"framerange\"][1]),\n                c=lambda: TimeSlider().range(todo[\"framerange\"][0], todo[\"framerange\"][1]))\n        cmds.iconTextButton(\n            image=\"editBookmark.png\",\n            style=\"iconOnly\",\n            w=30,\n            ann=\"Edit Todo.\",\n            c=lambda: s.editTodo(todo[\"uid\"], wrapper))\n        cmds.iconTextButton(\n            image=\"removeRenderable.png\",\n            style=\"iconOnly\",\n            w=30,\n            ann=\"Delete Todo without saving.\",\n            c=lambda: s.removeTodo(todo[\"uid\"]))\n        cmds.setParent(\"..\")\n\n    def editTodo(s, uid, gui):\n        \n        def update(uid, label):\n            s.data[uid] = label\n            print \"Updated Todo.\"\n            s._buidTodoTasks()\n\n        for ui in cmds.rowLayout(gui, q=True, ca=True):\n            cmds.deleteUI(ui)\n        cmds.rowLayout(gui, e=True, nc=2)\n        text = cmds.textField(p=gui, tx=s.data[uid])\n        cmds.button(l=\"Ok\", p=gui, c=lambda x: update(uid, cmds.textField(text, q=True, tx=True)))\n\n    def createTodo(s, txt):\n        \n        meta = s._parseTodo(txt)\n        if meta[\"label\"]:\n            def name(i):\n                return \"%s_%s\" % (s.basename, i)\n\n            i = 0\n            n = name(i)\n            while n in s.data.keys():\n                i += 1\n                n = name(i)\n            s.data[n] = txt\n            s._buidTodoTasks()\n            return True  \n        else:\n            cmds.confirmDialog(title=\"Whoops...\", message=\"You need to add some text for your Todo.\")\n            return False\n\n    def removeTodo(s, uid):\n        \n        del s.data[uid]\n        s._buidTodoTasks()\n\n    def activateTodo(s, uid, gui):\n        \n        for ui in cmds.rowLayout(gui, q=True, ca=True):\n            cmds.deleteUI(ui)\n        prog = cmds.progressBar(p=gui, pr=0)\n\n        def update(p):\n            cmds.progressBar(prog, e=True, pr=p)\n            cmds.refresh(cv=True)\n\n        try:\n            s.performArchive(uid, update)\n            s.removeTodo(uid)\n        except RuntimeError as e:\n            print \"Warning:\", e\n            s._buidTodoTasks()\n\n    def performArchive(s, uid, callback):\n        \n        data = s.data[\"todo_settings\"]\n        progress = 10\n        callback(progress)\n        scene = cmds.file(q=True, sn=True)\n        base = os.path.splitext(os.path.basename(scene))\n        if base[0] and os.path.isfile(scene):  \n            cmds.file(save=True)  \n            if \"archive\" in data and data[\"archive\"]:\n                if \"archive_path\" in data and data[\"archive_path\"] and os.path.isdir(data[\"archive_path\"]):\n                    with SafetyNet():\n                        FileArchive().archive(scene, data[\"archive_path\"], s.data[uid])\n                        print \"Archiving to folder: %s\" % data[\"archive_path\"]\n                else:\n                    cmds.confirmDialog(title=\"Uh oh...\", message=\"Can't save file archive. You need to provide a folder.\")\n                progress += 10\n                callback(progress)\n            if \"amp\" in data and data[\"amp\"]:\n                with SafetyNet():\n                    AMPArchive().archive(scene, s.data[uid])\n                    print \"Archiving to AMP\"\n                progress += 10\n                callback(progress)\n        for i in range(20):  \n            progress += i*5\n            if progress <= 100:\n                callback(progress)\n                time.sleep(0.05)\n\n    def moveDock(s):  \n        if cmds.dockControl(s.dock, q=True, fl=True):\n            s.data[\"todo_location\"] = \"float\"\n            print \"Floating Dock.\"\n        else:\n            area = cmds.dockControl(s.dock, q=True, a=True)\n            s.data[\"todo_location\"] = area\n            print \"Docking %s.\" % area\n\n    def closeDock(s, *loop):\n        visible = cmds.dockControl(s.dock, q=True, vis=True)\n        if not visible and loop:\n            cmds.scriptJob(ie=s.closeDock, p=s.dock, ro=True)\n        elif not visible:\n            cmds.deleteUI(s.dock, ctl=True)\n            print \"Window closed.\"\n\n\n\nclass FileArchive(object):\n    \n    def __init__(s):\n        s.zip = __import__(\"zipfile\")\n\n    def archive(s, src, dest, comment=\"\"):\n        basename = os.path.basename(src)\n        name = \"%s_%s_%s.zip\" % (os.path.splitext(basename)[0], int(time.time() * 100), comment)\n        dest = os.path.join(dest, name)\n        z = s.zip.ZipFile(dest, \"w\")\n        z.write(src, basename)\n        z.close()\n\n\nclass AMPArchive(object):\n    \n    def __init__(s):\n        try:\n            am = __import__(\"am\")\n            s.config = am.client.cmclient.config.Configurator()\n            s.manager = am.client.cmclient.manager.getShotManager(config=s.config)\n            s.root = s.manager.contentRoot\n            s.working = s._walk(s.root, [], \"working\")\n        except ImportError:\n            s.manager = False\n\n    def archive(s, path, comment):\n        \n        if s.manager and os.path.isfile(path) and s.root in path:\n            if s._status(path):\n                s._checkIn(path, comment)\n                s._checkOut(path)\n                return True\n            elif \"Confirm\" == cmds.confirmDialog(title=\"Hold up...\", message=\"You need to check out the file first.\\nWould you like to do that now?\"):\n                s._checkOut(path)\n                s._checkIn(path, comment)\n                s._checkOut(path)\n                return True\n        return False\n\n    def _walk(s, path, paths, stop):\n        \n        for d in os.listdir(path):\n            p = os.path.join(path, d)\n            if os.path.isdir(p):\n                if d == stop:\n                    paths.append(p)\n                else:\n                    s._walk(p, paths, stop)\n        return paths\n\n    def _checkIn(s, path, comment):\n        \n        s.manager.checkinViewItemByPath(path, comment=comment)\n\n    def _checkOut(s, path):\n        \n        s.manager.checkoutViewItemByPath(path)\n\n    def _revert(s, path):\n        \n        s.manager.revertViewItemByPath(path)\n\n    def _status(s, path):\n        \n        return os.access(path, os.W_OK)  \n\nif cmds.window(\"todo_window\", ex=True):  \n    cmds.deleteUI(\"todo_window\")\n\nMainWindow()\n" -stp "python" -i "daisyLarge.png" -p `tabLayout -query -selectTab $gShelfTopLevel`;